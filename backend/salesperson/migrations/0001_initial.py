# Generated by Django 5.2.2 on 2025-06-07 02:13

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('Admin', 'Admin'), ('Salesperson', 'Salesperson')], default='Salesperson', help_text='User role in the system', max_length=20)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'auth_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Product name', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Product description', null=True)),
                ('sku', models.CharField(help_text='Stock Keeping Unit - unique identifier', max_length=100, unique=True)),
                ('price', models.DecimalField(decimal_places=2, help_text='Product price', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('stock_quantity', models.IntegerField(default=0, help_text='Current stock quantity', validators=[django.core.validators.MinValueValidator(0)])),
                ('category', models.CharField(blank=True, help_text='Product category', max_length=100, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is product active/available')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
                'indexes': [models.Index(fields=['sku'], name='salesperson_sku_c4d7fc_idx'), models.Index(fields=['category'], name='salesperson_categor_60b7cc_idx'), models.Index(fields=['is_active'], name='salesperson_is_acti_90d3ac_idx')],
            },
        ),
        migrations.CreateModel(
            name='Sale',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('salesperson_name', models.CharField(help_text="Snapshot of salesperson's name at time of sale", max_length=255)),
                ('customer_name', models.CharField(blank=True, help_text='Customer name (optional)', max_length=255, null=True)),
                ('customer_phone', models.CharField(blank=True, help_text='Customer phone number (optional)', max_length=20, null=True)),
                ('products_sold', models.JSONField(default=list, help_text='Array of products sold with quantities and prices')),
                ('total_amount', models.DecimalField(decimal_places=2, help_text='Total sale amount', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('payment_method', models.CharField(choices=[('Cash', 'Cash'), ('Credit', 'Credit'), ('Mobile Money', 'Mobile Money'), ('Bank Transfer', 'Bank Transfer')], help_text='Primary payment method used', max_length=50)),
                ('payment_status', models.CharField(choices=[('Paid', 'Paid'), ('Partial', 'Partial'), ('Unpaid', 'Unpaid')], default='Unpaid', help_text='Current payment status', max_length=50)),
                ('amount_paid', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Amount already paid', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('balance', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Remaining balance (calculated automatically)', max_digits=12)),
                ('credit_details', models.TextField(blank=True, help_text='Additional details for credit sales', null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the sale', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('salesperson', models.ForeignKey(help_text='Salesperson who made this sale', on_delete=django.db.models.deletion.PROTECT, related_name='sales_made', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, help_text='Payment amount', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('payment_method', models.CharField(choices=[('Cash', 'Cash'), ('Credit', 'Credit'), ('Mobile Money', 'Mobile Money'), ('Bank Transfer', 'Bank Transfer')], help_text='Payment method used for this specific payment', max_length=50)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Completed', 'Completed'), ('Failed', 'Failed'), ('Refunded', 'Refunded')], default='Completed', help_text='Payment status', max_length=20)),
                ('reference_number', models.CharField(blank=True, help_text='Payment reference number (e.g., transaction ID)', max_length=100, null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this payment', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('recorded_by', models.ForeignKey(help_text='Admin who recorded this payment', limit_choices_to={'role': 'Admin'}, on_delete=django.db.models.deletion.PROTECT, related_name='payments_recorded', to=settings.AUTH_USER_MODEL)),
                ('sale', models.ForeignKey(help_text='Sale this payment belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='salesperson.sale')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SaleItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_name', models.CharField(help_text='Product name at time of sale', max_length=255)),
                ('product_sku', models.CharField(help_text='Product SKU at time of sale', max_length=100)),
                ('quantity', models.IntegerField(help_text='Quantity sold', validators=[django.core.validators.MinValueValidator(1)])),
                ('price_at_sale', models.DecimalField(decimal_places=2, help_text='Price per unit at time of sale', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('subtotal', models.DecimalField(decimal_places=2, help_text='Subtotal for this item (quantity Ã— price)', max_digits=12)),
                ('product', models.ForeignKey(help_text='Product being sold', on_delete=django.db.models.deletion.PROTECT, to='salesperson.product')),
                ('sale', models.ForeignKey(help_text='Sale this item belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='items', to='salesperson.sale')),
            ],
        ),
        migrations.AddIndex(
            model_name='sale',
            index=models.Index(fields=['salesperson', '-created_at'], name='salesperson_salespe_af740b_idx'),
        ),
        migrations.AddIndex(
            model_name='sale',
            index=models.Index(fields=['payment_status'], name='salesperson_payment_fd6b2d_idx'),
        ),
        migrations.AddIndex(
            model_name='sale',
            index=models.Index(fields=['payment_method'], name='salesperson_payment_2c5efe_idx'),
        ),
        migrations.AddIndex(
            model_name='sale',
            index=models.Index(fields=['-created_at'], name='salesperson_created_f917ce_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['sale', '-created_at'], name='salesperson_sale_id_cfb920_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['status'], name='salesperson_status_213a26_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['payment_method'], name='salesperson_payment_492bbb_idx'),
        ),
        migrations.AddIndex(
            model_name='saleitem',
            index=models.Index(fields=['sale'], name='salesperson_sale_id_9b9b9c_idx'),
        ),
        migrations.AddIndex(
            model_name='saleitem',
            index=models.Index(fields=['product'], name='salesperson_product_7d9aac_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='saleitem',
            unique_together={('sale', 'product')},
        ),
    ]
