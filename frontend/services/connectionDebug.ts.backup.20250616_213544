import axios from "axios";

// Current ngrok URL - update this when your ngrok tunnel changes
const CURRENT_NGROK_URL = "https://3c2e-59-145-142-18.ngrok-free.app/api/";

/**
 * Get the current ngrok URL being used for debugging
 */
export const getCurrentNgrokUrl = (): string => {
  return CURRENT_NGROK_URL;
};

/**
 * A utility to test API connectivity
 * @param url The URL to test connectivity to
 * @returns Promise with the result of the connection test
 */
export const testConnection = async (
  url: string
): Promise<{ success: boolean; message: string }> => {
  try {
    console.log(`Testing connection to: ${url}`);
    // Using a timeout of 5 seconds to avoid waiting too long
    const response = await axios.get(url, {
      timeout: 5000,
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
      },
    });

    return {
      success: true,
      message: `Connection successful. Status: ${
        response.status
      }, Data: ${JSON.stringify(response.data).substring(0, 200)}...`,
    };
  } catch (error: any) {
    // Log detailed error information for debugging
    console.error("Connection test failed:", error);
    let errorMessage = "Unknown error";

    if (error.response) {
      // Server responded with a status code outside the 2xx range
      errorMessage = `Server error: ${error.response.status} - ${JSON.stringify(
        error.response.data
      )}`;
    } else if (error.request) {
      // Request was made but no response received
      errorMessage =
        "No response from server. The server may be down or the URL is incorrect.";
    } else {
      // Error in setting up the request
      errorMessage = `Request error: ${error.message}`;
    }

    return {
      success: false,
      message: errorMessage,
    };
  }
};

/**
 * Debug helper to test the current ngrok URL
 * This function now only tests the ngrok URL since we've transitioned to ngrok-only setup
 */
export const debugConnection = async (): Promise<void> => {
  console.log("üõ†Ô∏è Starting ngrok connection debug...");

  console.log("üì° Testing ngrok backend URL...");

  try {
    const result = await testConnection(CURRENT_NGROK_URL);
    const status = result.success ? "‚úÖ" : "‚ùå";
    console.log(`${CURRENT_NGROK_URL}: ${status} ${result.message}`);

    if (result.success) {
      console.log(`‚úÖ Ngrok connection successful! üéØ`);
      console.log(
        `üí° All devices (Android emulator, physical device, web) can now access the API.`
      );
    } else {
      console.log("‚ùå Ngrok connection failed");
      console.log("üí° Troubleshooting suggestions:");
      console.log("1. Check if ngrok tunnel is running: ngrok http 8000");
      console.log(
        "2. Make sure Django server is running: python3 manage.py runserver 0.0.0.0:8000"
      );
      console.log("3. Verify the ngrok URL is correct and up-to-date");
      console.log(
        "4. Run ./update-ngrok-config.sh to update the frontend with current ngrok URL"
      );
      console.log(
        "5. If ngrok URL changed, update it in frontend/services/api.ts"
      );
    }
  } catch (err) {
    console.log(`${CURRENT_NGROK_URL}: ‚ùå Error during test - ${err}`);
    console.log("üí° Critical: ngrok connection failed!");
    console.log("Please ensure:");
    console.log("‚Ä¢ ngrok tunnel is active: ngrok http 8000");
    console.log(
      "‚Ä¢ Django server is running: python3 manage.py runserver 0.0.0.0:8000"
    );
    console.log("‚Ä¢ Frontend is using the correct ngrok URL");
  }

  console.log("üõ†Ô∏è Ngrok connection debug completed");
};

export default { testConnection, debugConnection, getCurrentNgrokUrl };
